// Load Wi-Fi library

#include <WiFi.h>
#include <PubSubClient.h>

//ULTRASSONICO
int echoPin=35;
int triggerPin=34;
//Metodo Ultrassonico inicio


// Replace with your network credentials
const char* ssid     = "GabouKing";
const char* password = "batataazul";

//Blutu
const char* mqttServer = "mqtt.eclipse.org";
const int mqttPort = 1883;
const char* mqttUser = "GabouKing";
const char* mqttPassword = "123456";
char mensagem[20];
WiFiClient client; // Cria o objeto espClient
PubSubClient espClient(client);
   
//Vari√°veis e objetos globais


// Set web server port number to 80
WiFiServer server(80);

// Variable to store the HTTP request
String header;

// Auxiliar variables to store the current output state
String output2State = "off";
String output15State = "off";
String longe = "off";
String meio = "off";
String perto = "off";

//Buzzer
String estadoBUZZER = "off";

float ultrassonico=0;
float luminosidade=0;
// Assign output variables to GPIO pins
const int output2 = 2;
const int output15 = 15;

const int LDR=32;
const int buzzer=21;

long readUltrasonicDistance(int triggerPin, int echoPin)
{
  pinMode(triggerPin, OUTPUT);  // Clear the trigger
  digitalWrite(triggerPin, LOW);
  delayMicroseconds(2);
  // Sets the trigger pin to HIGH state for 10 microseconds
  digitalWrite(triggerPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(triggerPin, LOW);
  pinMode(echoPin, INPUT);
  // Reads the echo pin, and returns the sound wave travel time in microseconds
  return pulseIn(echoPin, HIGH);
} 
//Metodo Ultrassonico fim

void setup() {

  //Ultrassonico inicio
  pinMode(buzzer, OUTPUT);
  pinMode(0, OUTPUT);
  Serial.begin(9600);

  pinMode(14, OUTPUT);
  pinMode(12, OUTPUT);
  pinMode(13, OUTPUT);
  //Ultrassonico fim
  
  //LEDS inicio
  // WebServ Leds
  Serial.begin(115200);
  // Initialize the output variables as outputs
  pinMode(output2, OUTPUT);
  pinMode(output15, OUTPUT);
  // Set outputs to LOW
  digitalWrite(output2, LOW);
  digitalWrite(output15, LOW);

  // Connect to Wi-Fi network with SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  // Print local IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP ");
  Serial.println(WiFi.localIP());
  server.begin();
  //LEDS Fim
}

void loop(){

  reconectabroker();

   sprintf(mensagem, "LDR %f", String(analogRead(LDR)));

  espClient.publish("CCI", mensagem);
  
  
  WiFiClient client = server.available();   
  if (client) {                             
  //conecta

                               
    Serial.println("New Client.");          
    String currentLine = "";                
    while (client.connected()) {           
      if (client.available()) {             
        char c = client.read();            
        Serial.write(c);                    
        header += c;

        if (c == '\n') {                    
          if (currentLine.length() == 0) {
           
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
            
            //Ultrassonico Inicio
            Serial.println(0.01723 * readUltrasonicDistance(34, 35));
              if (0.01723 * readUltrasonicDistance(34, 35) <=5) {
                ultrassonico=0.01723 * readUltrasonicDistance(34, 35);
                longe="off";
                meio="off";
                perto="on";
                digitalWrite(14, HIGH);
                digitalWrite(12, LOW);
                digitalWrite(13, LOW);
              } 
               else if (0.01723 * readUltrasonicDistance(34, 35) <= 20 &&0.01723 * readUltrasonicDistance(34, 35)>5 ) {
                ultrassonico=0.01723 * readUltrasonicDistance(34, 35);
                longe="off";
                meio="on";
                perto="off";
                  digitalWrite(14, LOW);
                  digitalWrite(12, HIGH);
                  digitalWrite(13, LOW);
                } else {
                  ultrassonico=0.01723 * readUltrasonicDistance(34, 35);
                  longe="on";
                  meio="off";
                  perto="off";
                  digitalWrite(14, LOW);
                  digitalWrite(12, LOW);
                  digitalWrite(13, HIGH);
                }
              
              delay(10); 
             
            //Ultrassonico Fim
            
            //LEDS Inicio
            // turns the GPIOs on and off
            if (header.indexOf("GET /2/on") >= 0) {
              Serial.println("GPIO 2 on");
              output2State = "on";
              digitalWrite(output2, HIGH);
            } else if (header.indexOf("GET /2/off") >= 0) {
              Serial.println("GPIO 2 off");
              output2State = "off";
              digitalWrite(output2, LOW);
            } else if (header.indexOf("GET /15/on") >= 0) {
              Serial.println("GPIO 15 on");
              output15State = "on";
              digitalWrite(output15, HIGH);
            } else if (header.indexOf("GET /15/off") >= 0) {
              Serial.println("GPIO 15 off");
              output15State = "off";
              digitalWrite(output15, LOW);
            }
            //LEDS Fim
            
            
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\"http-equiv='refresh' content='5'\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button2 {background-color: #555555;}</style></head>");
            
           
            client.println("<body><h1>ESP32 Web Server</h1>");
            client.println("<div>");
            client.println("<H1>LED Controller</H1>");

            
            client.println("<p>LED 1 - State " + output2State + "</p>");
             
            if (output2State=="off") {
              client.println("<p><a href=\"/2/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/2/off\"><button class=\"button button2\">OFF</button></a></p>");
            } 
               
             
            client.println("<p>LED 2 - State " + output15State + "</p>");
                  
            if (output15State=="off") {
              client.println("<p><a href=\"/15/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/15/off\"><button class=\"button button2\">OFF</button></a></p>");
            }
              client.println("</div>");

            //LEDS Fim
            
            //LDR
            luminosidade = analogRead(LDR);
            

            //LDR Fim
            if(analogRead(LDR)>1800){
              digitalWrite(buzzer,HIGH);
              }
              else{
               digitalWrite(buzzer,LOW);
                }
               
            //Ultrassonico Inicio
             client.println("<H1>ULTRASSONICO</H1>");
            if(longe=="on"){
            client.println("<div  style= background-color:green ><H1> TESTE SENSOR</H1></div>");
            }else{
              client.print("");
            }
            if(meio=="on"){
            client.println("<div  style= background-color:yellow ><H1> TESTE SENSOR</H1></div>");
            }
            else{
              client.print("");
            }
            if(perto=="on"){
            client.println("<div  style= background-color:red ><H1> TESTE SENSOR</H1></div>");
            }
            else{
              client.print("");
            }
            //Ultrassonico Fim
           client.println("<div>");
           client.println("<p>Ultrassonico:"+String(ultrassonico)+".");
           client.println("<p>LDR:"+String(luminosidade)+".");
           client.println("</div>");
            client.println("</body></html>");
            
            
            client.println();
            
            break;
          } else { 
            currentLine = "";
          }
        } else if (c != '\r') {  
          currentLine += c;      
        }
      }
    }
    
    header = "";
   
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  
}
}
void reconectabroker()
{
  //Conexao ao broker MQTT
  espClient.setServer(mqttServer, mqttPort);
  while (!client.connected())
  {
    Serial.println("Conectando ao broker MQTT...");
    if (espClient.connect("ESP32Client", mqttUser, mqttPassword ))
    {
      Serial.println("Conectado ao broker!");
    }
    else
    {
      Serial.print("Falha na conexao ao broker - Estado: ");
      Serial.print(espClient.state());
      delay(2000);
    }
  }
}
